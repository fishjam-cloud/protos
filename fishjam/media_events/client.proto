syntax = "proto3";

package media_events.client;

import "fishjam/media_events/shared.proto";

// Defines any type of message sent between FJ and a peer
message MediaEvent {
  message VariantBitrates {
    media_events.shared.Encoding rid = 1;
    int32 bitrate = 2;
  }

  // Client -> WebRTC Endpoint

  // Sent when a client wants to join WebRTC Endpoint. It contains only endpoint's metadata
  message Connect {
    string metadata = 1;
  }

  // Sent when client disconnects from WebRTC Endpoint. It contains no data
  message Disconnect {}

  // Contains new metadata of client's endpoint
  message UpdateEndpointMetadata {
    string metadata = 1;
  }

  // Sent when client disables one of the track variants
  message DisableTrackEncoding {
    string track_id = 1;
    media_events.shared.Encoding encoding = 2;
  }

  // Sent when client enables one of the track variants
  message EnableTrackEncoding {
    string track_id = 1;
    media_events.shared.Encoding encoding = 2;
  }

  // Contains new metadata of some track and an id of this track
  message UpdateTrackMetadata {
    string track_id = 1;
    string track_metadata = 2;
  }

  // Sent when a track is muted
  message MuteTrack {
    string track_id = 1;
  }

  // Sent when a track is unmuted
  message UnmuteTrack {
    string track_id = 1;
  }

  // Client -> WebRTC Enpoint

  // Informs that a client wants to renegotiate connection due to adding a track or removing a track
  message RenegotiateTracks {}

  // Contains an id of the track that the client wants to prioritize
  message PrioritizeTrack {
    string track_id = 1;
  }

  // Contains an id of the track that the client want to unprioritize.
  message UnprioritizeTrack {
    string track_id = 1;
  }

  // Contains information of how many videos in different quality (high, medium, small) the client would like to receive.
  // `allSameSize` flag which indicates that all videos should be in the same quality.
  message PreferedVideoSizes {
    int32 big_screens = 1;
    int32 medium_screens = 2;
    int32 small_screens = 3;
    bool all_same_size = 4;
  }

  // Contains an SDP offer, a mapping between `track_id` and `track_metadata`, mapping between `track_id`
  // and this track's bitrates (or all of its variants bitrates) and a mapping between `mid` and `track_id`.
  //  Maps contain only information about current client's `sendonly` tracks.
  message SdpOffer {
    message TrackIdToMetadata {
      string id = 1;
      media_events.shared.Metadata metadata = 2;
    }

    message TrackIdToTrackBitrates {
      string id = 1;
      repeated VariantBitrates bitrates = 2;
    }

    string sdp = 1;
    repeated TrackIdToMetadata trackIdToTrackMetadata = 2;
    repeated TrackIdToTrackBitrates trackIdToTrackBitrates = 3;
    repeated media_events.shared.MidToTrackId mid_to_track_id = 4;
  }

  // Informs that a client wants to receive a specific track variant.
  // The track variant will be sent whenever it is available.
  // If choosen variant is unavailable, some other variant will be
  // sent until choosen variant becomes active again.
  message SetTargetTrackVariant {
    string track_id = 1;
    media_events.shared.Encoding variant = 2; // TODO: should be encoding
  }

  // Contains updated bitrates of variants of the track send by the client.
  // Needs to contain all of the variants.
  message TrackVariantBitrates {
    string track_id = 1;
    repeated VariantBitrates variantBitrates = 2;
  }

  oneof content {
    Connect connect = 1;
    Disconnect disconnect = 2;
    UpdateEndpointMetadata update_endpoint_metadata = 3;
    DisableTrackEncoding disable_track_encoding = 4;
    EnableTrackEncoding enable_track_encoding = 5;
    UpdateTrackMetadata udpate_track_metadtata = 6;
    MuteTrack mute_track = 7;
    UnmuteTrack unmute_track = 8;
    RenegotiateTracks renegotiate_tracks = 9;
    PrioritizeTrack prioritize_track = 10;
    UnprioritizeTrack unprioritize_track = 11;
    PreferedVideoSizes prefered_video_sizes = 12;
    media_events.shared.Candidate candidate = 13;
    SdpOffer sdp_offer = 14;
    SetTargetTrackVariant set_target_track_variant = 15;
    TrackVariantBitrates track_variant_bitrates = 16;
  }
}
